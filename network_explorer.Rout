
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[1] "welcome to R JordanadroJ R ot emoclew"
> setwd("~/Documents/R/netbid_app/netbid_analysis_pipeline_lite/")
> library(shiny)
> library(shinycssloaders)
> source("./drl_control_panel.R")

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:igraph’:

    normalize, path, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘purrr’

The following objects are masked from ‘package:igraph’:

    compose, simplify


Attaching package: ‘tibble’

The following object is masked from ‘package:igraph’:

    as_data_frame


Attaching package: ‘dplyr’

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:igraph’:

    as_data_frame, groups, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘tidyr’

The following object is masked from ‘package:igraph’:

    crossing


Attaching package: ‘magrittr’

The following object is masked from ‘package:tidyr’:

    extract

The following object is masked from ‘package:purrr’:

    set_names


Attaching package: ‘tidygraph’

The following object is masked from ‘package:igraph’:

    groups

The following object is masked from ‘package:stats’:

    filter


Attaching package: ‘class’

The following object is masked from ‘package:igraph’:

    knn

Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.1 (2020-08-26 16:20:06 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.24.0 (2020-08-26 16:11:58 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following object is masked from ‘package:magrittr’:

    equals

The following object is masked from ‘package:igraph’:

    hierarchy

The following object is masked from ‘package:shiny’:

    printStackTrace

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.10.1 (2020-08-26 22:50:31 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:magrittr’:

    extract

The following object is masked from ‘package:tidyr’:

    extract

The following objects are masked from ‘package:shiny’:

    setProgress, validate

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, nullfile, parse,
    warnings


Attaching package: ‘plotly’

The following object is masked from ‘package:ggplot2’:

    last_plot

The following object is masked from ‘package:igraph’:

    groups

The following object is masked from ‘package:stats’:

    filter

The following object is masked from ‘package:graphics’:

    layout


── Column specification ────────────────────────────────────────────────────────
cols(
  X1 = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  X1 = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  X1 = col_character()
)

> source("./utility_functions.R")
> # utility functions ------------
> 
> # rest of app ---------------
> 
> source("./drl_helper_functions.R")
> source("./drl_main_functions.R")
> 
> dc <- readRDS("./DATA/dc_example_corrected.RDS") #instead of running the pipeline for now
> 
> categorical_colors <- readRDS(categorical_color_file)
> ui <- fluidPage(
+   
+   # Application title
+   titlePanel("Functional Network Explorer"),
+   
+   sidebarLayout(
+     
+     # Sidebar with a slider input
+     sidebarPanel(
+       sliderInput("filter_percentage", label = h3("Filter Percentage"), min = 0, 
+                   max = 100, value = 100),
+       actionButton(inputId = "layout_graph", label = "Run Network Layout"),
+       numericInput(inputId = "hdbscan_n", label = "N for hdbscan", min = 5, max = 1000, value = 500, step = 1) ,
+       checkboxInput(inputId = "force_hard_cluster", label = "Force Hard Cluster", value = TRUE),
+       actionButton(inputId = "run_cluster",label = "Cluster Network"),
+       radioButtons(inputId = "activity_type", label = "Select Activity Type", choiceNames = c("Transcription Factor","Signalling Factor"), choiceValues =c("TF","SIG")),
+       selectInput(inputId = "numerator",label = "Numerator",choices = NULL),
+       selectInput(inputId = "denominator",label = "Denominator",choices = NULL),
+       numericInput(inputId = "color_max", label = "color max", value = .5),
+       
+       numericInput(inputId = "color_min", label = "color min", value = -.5)
+     ),
+     
+     # Show a plot of the generated distribution
+     mainPanel(
+       fluidRow(column(6, 
+                       plotOutput("graph_layout_controller",
+                                  brush = brushOpts(
+                                    id = "layout_brush",
+                                    resetOnNew = TRUE
+                                  )
+                       ) 
+       ),
+       column(6, 
+              plotOutput("graph_layout")
+       )
+       
+       ),
+       fluidRow(
+         column(6,
+                plotOutput(
+                  "colored_graph_layout"
+         )),
+         column(6, plotOutput("beeswarm_plot",
+                              dblclick = "plot1_dblclick",
+                              brush = brushOpts(
+                                id = "plot1_brush",
+                                resetOnNew = TRUE,direction = "y")
+         )
+                              )
+         
+       )
+     )
+   )
+ )
> 
> 
> 
> 
> server <- function(input, output, session) {
+   
+   dc_parameters <- reactive(
+     {
+       dc_used <- dc    
+       dc_used$data$input$sample_info <- dc_used$data$input$sample_info %>% tidyr::unite("sample_type",Met.Site,Source,sep = " ")
+       dc_used
+     }
+   )
+   
+   dc_filtered <-  reactive(# to try to cut down on the data used
+     {
+       dc_used <- dc_parameters()
+       sample_percentage <- input$filter_percentage
+       nodes <- dc_used$network %>% activate(nodes) 
+       n_points <- dim(as_tibble(nodes))[1]
+       sample_n <- ceiling((sample_percentage/100)*n_points)
+       indices <- sample.int(n = n_points,size = sample_n)
+       dc_used$network <- dc_used$network %>% activate(nodes) %>% slice(indices)
+       dc_used
+     }    
+   )
+   
+   dc_layout_reactive <- reactive({dc_filtered()})
+   
+   activity_plot_trigger <- reactive(list(input$run_cluster,input$layout_graph))
+   
+   dc_layout <- eventReactive(eventExpr = activity_plot_trigger(),
+                              {
+                                dc_layout_reactive() 
+                              }
+   )
+   
+   dc_cluster <- eventReactive(eventExpr = input$run_cluster,
+                               {
+                                 to_clust <- dc_layout_reactive()
+                                 to_clust$parameters$cluster_parameters$hdbscan_knn$force_hard_cluster <- input$force_hard_cluster
+                                 to_clust$parameters$cluster_parameters$hdbscan_knn$hdbscan_min_pts <- input$hdbscan_n
+                                 dc_out <- cluster_network_igraph(
+                                   dc_in = to_clust
+                                 )
+                                 dc_out
+                               } 
+   )
+   
+   dc_layout_gg_raw <- reactive({ #Called raw because there is no clustering
+     dc_used <- dc_layout() 
+     nodes <- dc_used$network %>% activate(nodes) %>% as_tibble()
+     gg_raw <- nodes %>% ggplot(aes(x = x, y = y)) + 
+       theme_prism() + geom_point(color = "black", alpha = .25, size = .5) + 
+       scale_color_manual(values = categorical_colors)# + theme(aspect.ratio = 1)
+     dc_used$data$output$gg_layout <- gg_raw
+     dc_used
+   }
+   )
+   
+   # draiwng the  cntoroller for raw layout -------
+   observeEvent(input$layout_graph ,{output$graph_layout_controller <- renderPlot( dc_layout_gg_raw()$data$output$gg_layout)})
+   
+   #   drawing the uncolored raw layout that gets controlled ---------
+   observeEvent(input$layout_graph ,{output$graph_layout <- renderPlot({ dc_layout_gg_raw()$data$output$gg_layout +  coord_cartesian(xlim = ranges2$x, ylim = ranges2$y )})})
+   
+   dc_layout_gg_forced <- reactive({ #a reactive that just makes a ggplot layout of the clustered output with forcing of hard clustering
+     dc_used <- dc_cluster() 
+     nodes <- dc_used$network %>% activate(nodes) %>% as_tibble()
+     gg_forced <- nodes %>% ggplot(aes(x = x, y = y,color = factor(Cluster))) + 
+       theme_prism()  + geom_point(size = .5) + 
+       scale_color_manual(values = categorical_colors)#+ theme(aspect.ratio = 1)
+     dc_used$data$output$gg_layout <- gg_forced
+     dc_used
+   }
+   )
+   
+   dc_layout_gg_natural <- reactive({ #a reactive that just makes a ggplot layout of the clustered output, but no forcing of hard clustering
+     dc_used <- dc_cluster() 
+     nodes <- dc_used$network %>% activate(nodes) %>% as_tibble()
+     no_zero_cluster <- nodes %>% dplyr::filter(Cluster != 0)
+     zero_cluster   <- nodes %>% dplyr::filter(Cluster == 0)
+     gg_natural <- no_zero_cluster %>% ggplot(aes(x = x, y = y, color = factor(Cluster))) + geom_point(size = .5) + 
+       scale_color_manual(values = categorical_colors) + 
+       geom_point(data = zero_cluster, size = .5,alpha = .25) + theme_prism()
+     dc_used$data$output$gg_layout <- gg_natural
+     dc_used
+   }
+   )
+   
+   # drawing the controller for the clustered layout  ------
+   observeEvent(input$run_cluster ,{output$graph_layout_controller <- renderPlot( expr = {
+     if(dc_cluster()$parameters$cluster_parameters$hdbscan_knn$force_hard_cluster){
+       to_plot_control <- dc_layout_gg_forced()$data$output$gg_layout
+       
+     } else{
+       to_plot_control <-  dc_layout_gg_natural()$data$output$gg_layout 
+     }
+     to_plot_control
+   })
+   }
+   )
+   
+   #    drawing the clustered layout that gets controlled ----------- 
+   observeEvent(input$run_cluster, {output$graph_layout <-renderPlot(
+     expr = {
+       if(dc_cluster()$parameters$cluster_parameters$hdbscan_knn$force_hard_cluster){
+         to_plot <- dc_layout_gg_forced()$data$output$gg_layout  +  coord_cartesian(xlim = ranges2$x, ylim = ranges2$y )
+       } else{
+         to_plot <- dc_layout_gg_natural()$data$output$gg_layout +  coord_cartesian(xlim = ranges2$x, ylim = ranges2$y)
+       }
+       to_plot 
+     }
+   )
+   }
+   )
+   
+   # reactive that returns data container with a tidy activity dataframe
+   activity_dc_long <- reactive(
+     {
+       dc_used <- dc_layout()
+       
+       tidy_activity <- dc_used$data$input$activity %>% exprs() %>%
+         as_tibble(rownames = "id") %>% 
+         pivot_longer(cols = -id, names_to = "sample", values_to = "activity") %>%
+         separate(col = id, sep = "_", into = c("id","type"))  
+       
+       samples_to_join <- dc_used$data$input$sample_info #selecting the sample info to join on
+       
+       tidy_activity <- tidy_activity %>%
+         full_join(samples_to_join, by = "sample")  
+       
+       tidy_activity <-    dc$network %>% as_tibble() %>% full_join(tidy_activity, by = "id")
+       
+       dc_used$data$input$tidy_activity_long <- tidy_activity
+       dc_used
+     }
+   )
+   
+   activity_dc_wide <- reactive(
+     {
+       dc_used <- activity_dc_long()
+       
+       tidy_activity <- dc_used$data$input$tidy_activity_long
+       
+       tidy_activity_wide <- tidy_activity %>% filter(!is.na(activity)) %>%  group_by(id,sample_type,type) %>%
+         summarize(activity = mean(activity,na.rm = TRUE)) %>% 
+         pivot_wider(names_from = sample_type, values_from = activity) 
+       
+       dc_used$data$input$tidy_activity_wide <- tidy_activity_wide
+       dc_used
+     }
+   )
+   
+   activity_dc_wide_joined <- reactive({
+     dc_used <-  activity_dc_wide()  
+     #here is where we filter on activity type 
+     activity_table <- dc_used$data$input$tidy_activity_wide %>% dplyr::filter(type %in% input$activity_type)
+     activity_table <- activity_table %>% mutate(differential_activity = .data[[input$numerator]]-.data[[input$denominator]]) %>% dplyr::filter(!is.na(differential_activity))
+     activity_table <- activity_table %>% dplyr::filter(!is.na(differential_activity))
+     nodes <- dc_cluster()$network %>% activate(nodes) %>% as_tibble() 
+     
+     
+     activity_table <-  activity_table %>% full_join(nodes, by = "id") %>% dplyr::filter(!is.na(differential_activity))
+     dc_used$data$input$tidy_activity_wide_joined <- activity_table
+     dc_used
+   })
+   
+   scale_turbo <- reactive({
+   scale_color_gradientn(colors =  viridis::viridis_pal(option = "turbo", begin = 0, end = 1)(1000), limits = c(-.5,.5), na.value = "#787878")
+     
+   })
+   # reactive that returns plot with activity
+   dc_layout_gg_activity <- reactive({
+     dc_used <-  activity_dc_wide_joined()  
+     #here is where we filter on activity type 
+     activity_table <-  dc_used$data$input$tidy_activity_wide_joined
+     gg_activity <- activity_table %>% ggplot(aes(x = x, y = y, color = differential_activity)) + geom_point(size = 1,alpha = .95) + scale_turbo() + 
+       theme_prism()
+     dc_used$data$output$gg_layout <- gg_activity
+     dc_used
+   }
+   )
+   
+   #    drawing the layout colored by activity----------- 
+   observeEvent(activity_plot_trigger(),
+                {output$colored_graph_layout <- renderPlot(
+                  expr = { 
+                    gg <- dc_layout_gg_activity()$data$output$gg_layout
+                    x_limit <- ranges2$x
+                    y_limit <- ranges2$y
+                    gg +  coord_cartesian(xlim = x_limit, ylim = y_limit )
+                  }
+                )
+                }
+   )
+   
+   observeEvent(input$run_cluster,{
+     output$beeswarm_plot <- renderPlot(
+       expr = { 
+         dc_used <- activity_dc_wide_joined()
+         plot_activity <- dc_used$data$input$tidy_activity_wide_joined %>% dplyr::filter(Cluster != 0)# %>%     mutate(Cluster = factor(Cluster))
+       
+          plot_activity %>% ggplot(aes(x = factor(Cluster), y = differential_activity)) + geom_boxplot(outlier.shape = NA, aes( group = factor(Cluster))) + ggbeeswarm::geom_quasirandom(size = .25, alpha = .5,aes(color = differential_activity)) + scale_turbo() +
+          coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE) + theme_prism()
+ 
+       }
+     )
+     
+   })
+   
+   
+   #drawing the numerator for the color control
+   observeEvent(activity_dc_wide(),{
+     freezeReactiveValue(input,"numerator")
+     choices_used <- unique(activity_dc_wide()$data$input$sample_info$sample_type)
+     updateSelectInput(inputId = "numerator", choices = choices_used) 
+   }
+   )
+   #drawing the denominator for the color control
+   observeEvent(activity_dc_wide(),{
+     freezeReactiveValue(input,"denominator")
+     choices_used <- unique(activity_dc_wide()$data$input$sample_info$sample_type)
+     updateSelectInput(inputId = "denominator", choices = choices_used) 
+   }
+   )
+   
+   
+   ranges <- reactiveValues(y = NULL)
+   observeEvent(input$plot1_dblclick, {
+     brush <- input$plot1_brush
+     if (!is.null(brush)) {
+ 
+       ranges$y <- c(brush$ymin, brush$ymax)
+ 
+     } else {
+ 
+       ranges$y <- NULL
+     }
+   })
+ 
+   
+   #the code below deals with the zooming options for the plot
+   ranges2 <- reactiveValues(x = NULL, y = NULL)
+   observe({ #here is where we watch to see if they are zooming in with the brush
+     brush <- input$layout_brush
+     if (!is.null(brush)) {
+       ranges2$x <- c(brush$xmin, brush$xmax)
+       ranges2$y <- c(brush$ymin, brush$ymax)
+       
+     } else {
+       ranges2$x <- NULL
+       ranges2$y <- NULL
+     }
+   })
+   
+ }
> 
> shinyApp(ui, server)

Listening on http://127.0.0.1:5195
